# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-08-02T23:10:25+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class PageProperty(BaseModel):
    message: Optional[str] = Field(None, title='Message')
    message_type: Optional[str] = Field(None, title='Message Type')


class TableColumn(BaseModel):
    name: str = Field(..., title='Name')
    column_type: str = Field(..., title='Column Type')
    data_type: str = Field(..., title='Data Type')
    display_type: str = Field(..., title='Display Type')


class Type(Enum):
    python = 'python'


class TableData(BaseModel):
    type: Optional[Type] = Field(None, title='Type')
    columns: Optional[List[TableColumn]] = Field(None, title='Columns')
    data: Optional[List[List]] = Field(None, title='Data')


class ColumnProperty(BaseModel):
    visible: Optional[bool] = Field(None, title='Visible')


class Table1ColumnsContext(BaseModel):
    order_id: ColumnProperty
    user_id: ColumnProperty
    product_name: ColumnProperty
    quantity: ColumnProperty
    total_price: ColumnProperty
    order_date: ColumnProperty


class Table1Context(BaseModel):
    data: Optional[TableData] = None
    message: Optional[str] = Field(None, title='Message')
    message_type: Optional[str] = Field(None, title='Message Type')
    columns: Table1ColumnsContext


class Button1Context(BaseModel):
    visible: Optional[bool] = Field(True, title='Visible')


class Text1Context(BaseModel):
    visible: Optional[bool] = Field(True, title='Visible')
    text: Optional[str] = Field(None, title='Text')


class Context(BaseModel):
    page: PageProperty
    table1: Table1Context
    button1: Button1Context
    text1: Text1Context
