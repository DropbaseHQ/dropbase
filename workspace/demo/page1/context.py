# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-03-13T17:52:19+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field


class InputContextProperty(BaseModel):
    visible: Optional[bool] = Field(None, title='Visible')
    message: Optional[str] = Field(None, title='Message')
    message_type: Optional[str] = Field(None, title='Message Type')


class ButtonContextProperty(BaseModel):
    visible: Optional[bool] = Field(None, title='Visible')
    message: Optional[str] = Field(None, title='Message')
    message_type: Optional[str] = Field(None, title='Message Type')


class Widget1ComponentsContext(BaseModel):
    input1: InputContextProperty
    input2: InputContextProperty
    input3: InputContextProperty
    input4: InputContextProperty
    input5: InputContextProperty
    button1: ButtonContextProperty


class Widget1Context(BaseModel):
    message: Optional[str] = Field(None, title='Message')
    message_type: Optional[str] = Field(None, title='Message Type')
    components: Widget1ComponentsContext


class WidgetsContext(BaseModel):
    widget1: Widget1Context


class SqliteColumnContextProperty(BaseModel):
    visible: Optional[bool] = Field(None, title='Visible')
    message: Optional[str] = Field(None, title='Message')
    message_type: Optional[str] = Field(None, title='Message Type')


class ButtonColumnContextProperty(BaseModel):
    visible: Optional[bool] = Field(None, title='Visible')
    message: Optional[str] = Field(None, title='Message')
    message_type: Optional[str] = Field(None, title='Message Type')


class Table1ColumnsContext(BaseModel):
    order_id: SqliteColumnContextProperty
    user_id: SqliteColumnContextProperty
    product_name: SqliteColumnContextProperty
    quantity: SqliteColumnContextProperty
    total_price: SqliteColumnContextProperty
    order_date: SqliteColumnContextProperty
    delete: ButtonColumnContextProperty


class Table1Context(BaseModel):
    message: Optional[str] = Field(None, title='Message')
    message_type: Optional[str] = Field(None, title='Message Type')
    reload: Optional[bool] = Field(False, title='Reload')
    columns: Table1ColumnsContext


class TablesContext(BaseModel):
    table1: Table1Context


class Context(BaseModel):
    widgets: WidgetsContext
    tables: TablesContext
